import gradio as gr
import pandas as pd
import keras
import numpy as np
import logging
import io
from PIL import Image
import plotly.express as px
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def get_class_names():
    with open('class_names.txt', 'r') as file:
        class_names = file.readlines()
    return [class_name.strip() for class_name in class_names]

def classify_image(image):
    if isinstance(image, np.ndarray):
        image = Image.fromarray(image)
    
    # Convert PIL image to BytesIO object
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    
    # Load image using keras.preprocessing.image.load_img
    image = keras.preprocessing.image.load_img(img_byte_arr, target_size=(100, 100))
    image = keras.preprocessing.image.img_to_array(image)
    image = np.expand_dims(image, axis=0)
    logging.info('Image successfully resized')
    
    
    
    model = keras.models.load_model('model/best_model_cnn.keras')
    logging.info('Model loaded successfully')

    prediction = model.predict(image)
    logging.info('Prediction made')

    class_names = get_class_names()
    
    predicted_label = class_names[np.argmax(prediction, axis=1)[0]]
    predicted_label = str(predicted_label)
    logging.info('Label predicted')

    confidence_score = np.max(prediction)

    top_k = 5
    top_k_indices = np.argsort(prediction[0])[-top_k:][::-1]
    top_k_labels = [class_names[i] for i in top_k_indices]
    top_k_scores = prediction[0][top_k_indices]
    # Create a dictionary for the top-k predictions
    top_k_predictions = {label: float(score) for label, score in zip(top_k_labels, top_k_scores)}

    df = pd.DataFrame({
        'Class': top_k_labels,
        'Confidence': top_k_scores
    })

    df = df.sort_values(by='Confidence', ascending=False)
    fig = px.bar(df, x='Class', y='Confidence', title='Top 5 Predictions')
    
    return predicted_label, 100*float(confidence_score), fig

def about_author():
    return """
    **S. Abraham Z. KOLOBOE**

    *Data Scientist | Ing√©nieur en Math√©matiques et Mod√©lisation*

    Bonjour,
    Je suis Abraham, un Data Scientist et Ing√©nieur en Math√©matiques et Mod√©lisation.
    Mon expertise se situe dans les domaines des sciences de donn√©es et de l'intelligence artificielle.
    Avec une approche technique et concise, je m'engage √† fournir des solutions efficaces et pr√©cises dans mes projets.

    * Email : <abklb27@gmail.com>
    * WhatsApp : +229 91 83 84 21
    * Linkedin : [Abraham KOLOBOE](https://www.linkedin.com/in/abraham-zacharie-koloboe-data-science-ia-generative-llms-machine-learning)
    """

with gr.Blocks() as demo:
    gr.Markdown("# üçé Fruits Classification App üçå")
    with gr.Accordion("A propos de l'auteur", open=False):
        gr.Markdown(about_author())

    with gr.Row():
        with gr.Column():
            image_input = gr.Image()
            label_output = gr.Label()
            confidence_output = gr.Label()

        with gr.Column():
            with gr.Accordion("A propos de l'application", open=True):
                gr.Markdown("""
                ## Bienvenue dans l'application de classification de fruits ! üçáüçâüçç

                Cette application utilise un mod√®le de deep learning pour classifier des images de fruits. Vous pouvez t√©l√©charger une image de fruit, et l'application affichera la classe correspondante ainsi que le score de confiance de la pr√©diction. De plus, un graphique en barres montrera les scores de confiance des 5 classes les plus proches.

                ### Fonctionnalit√©s
                - üì∑ **T√©l√©chargement d'image** : Chargez une image de fruit au format JPG, PNG ou JPEG.
                - üß† **Pr√©diction** : Le mod√®le de deep learning pr√©dit la classe du fruit.
                - üìä **Visualisation** : Affichez un graphique en barres des scores de confiance des 5 classes les plus proches.

                ### Comment utiliser l'application
                1. **T√©l√©chargez une image** : Cliquez sur le bouton "Choose an image..." et s√©lectionnez une image de fruit depuis votre appareil.
                2. **Affichage de l'image** : L'image t√©l√©charg√©e sera affich√©e dans la premi√®re colonne.
                3. **R√©sultats de la pr√©diction** : La classe pr√©dite et le score de confidence seront affich√©s dans la deuxi√®me colonne.
                4. **Graphique en barres** : Un graphique en barres montrera les scores de confiance des 5 classes les plus proches.

                Profitez de l'application et amusez-vous √† classifier vos fruits pr√©f√©r√©s ! üçáüçâüçç

                N'h√©sitez pas √† contribuer ou √† signaler des probl√®mes via les issues du d√©p√¥t [GitHub](https://github.com/abrahamkoloboe27/Fruits-Recognition-Training) .
                """)
            
            top_k_output = gr.Plot()
    image_input.change(classify_image, inputs=image_input, outputs=[label_output, confidence_output, top_k_output])

demo.launch()
